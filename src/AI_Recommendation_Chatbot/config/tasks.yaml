---
conversation_task:
  description: >
    Based on the conversation so far "{conversation_history}" and the latest message "{user_input}",
    determine whether the user is asking for a recommendation of events or 
    looking for more information on a specific event. Extract relevant filters
    such as genre, performer, date and time, price, popularity, event size, and additional context.
    If it’s a follow-up, identify the referenced event.
  expected_output: >
    You should return a python dictionary with the following keys:
    - 'intention': either 'recommendation' or 'more_info'
    - 'preferences': a dictionary of user preferences. This should include: event type, location, 
    date and time, genre, performer, price, popularity, event size, and additional context.
    - 'referenced_event': the name or identifier of a specific event (if applicable)
    Preferences will be constantly updated based on the conversation. If the user is following up, return a string or 
    identifier referring to the event being referenced (e.g., "Knicks game").
  async_execution: false
  agent: conversation_specialist

search_and_present_task:
  description: >
    Based on the user's intention:
    - If 'recommendation': Use the extracted preferences to conduct a web search, extract ticket info,
    validate, rank, and present the top 5 events in natural language with bullet points including event name,
    date, location, price, a link, and short description.
    - If 'more_info': Use the referenced event name from the conversation, and if relevant, the stored recommendation list "{recommendations}"
      and preferences "{preferences}" to identify the event. Conduct a focused web search and scraping to provide
      detailed event information (date, time, venue, performers, seating, and price breakdown).
  expected_output: >
    You should return a python dictionary with the following keys:
    - 'intention': pass on the same value you received.
    - 'preferences': the same dictionary of user preferences you received.
    - 'output':
      - For 'recommendation': a natural-language summary of the top 5 recommended events with available tickets.
      - For 'more_info': a natural-language detailed description of the referenced event.
  async_execution: false
  agent: web_search_expert
  context:
    - conversation_task

# fetch_events_data_task:
#   description: >
#     Conduct web searches and extract detailed ticket information based on user preferences.
#     Return a comprehensive list of events including event name, date, location, price,
#     and ticket link.
#   expected_output: >
#     A list of comprehensive event results (name, date, location, price, ticket URL).
#   async_execution: false
#   agent: web_search_expert
#   context:
#     - conversation_task

# filter_and_rank_task:
#   description: >
#     Validate the reasonability of ticket results and rank the top 5 based on relevance
#     to user preferences.
#   expected_output: >
#     A ranked list of the top 5 events with available tickets, including event name, date,
#     location, price, and ticket URL.
#   async_execution: false
#   agent: filtering_and_ranking_specialist
#   context:
#     - fetch_events_data_task

# present_results_task:
#   description: >
#     Present the ranked event results to the user in natural language.
#     Display as bullet points with event name, date, time, location, price, a link,
#     and a short description. Ask the user if they want more info on any.
#   expected_output: >
#     A natural language summary of the top 5 events with details and follow-up question.
#   async_execution: false
#   agent: conversation_specialist
#   context:
#     - filter_and_rank_task

# fetch_event_details_task:
#   description: >
#     Given the user's follow-up "{user_input}", identify which event the user is referring to—
#     whether from previous recommendations or a new event mentioned in the current message.
#     If available, use stored recommendation list "{recommendations}" and user preferences "{preferences}" to identify the event and enrich the detail.
#     Then conduct a focused search and scraping to gather details such as
#     date, time, venue, performers, price range, and seating.
#   expected_output: >
#     A natural-language summary with detailed information for the referenced event.
#     The output should make clear which event is being elaborated on, with enriched context
#     from memory and fresh lookup.
#   input_schema:
#     user_input: str
#     recommendations: list
#     preferences: dict
#   async_execution: false
#   agent: scraping_specialist
#   context:
#     - conversation_task